version: '3.8'
services:
  patient-service-db:
    image: postgres:latest
    container_name: patient-service-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"  # Standard PostgreSQL port
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - patient-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  patient-service:
    build: 
      context: ./patient-service
      dockerfile: Dockerfile
    container_name: patient-service
    environment:
      # Use container name as hostname
      SPRING_DATASOURCE_URL: jdbc:postgresql://patient-service-db:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    ports:
      - "4000:4000"
      - "5005:5005"  # Debug port
    depends_on:
      patient-service-db:
        condition: service_healthy
    networks:
      - patient-network

  billing-service:
    build: 
      context: ./billing-service
      dockerfile: Dockerfile
    container_name: billing-service
    ports:
      - "4001:4001"
      - "9001:9001"
    networks:
      - patient-network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - patient-network

volumes:
  postgres_data:

networks:
  patient-network:
    driver: bridge